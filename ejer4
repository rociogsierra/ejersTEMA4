import random

#SECANTE

def secante(f, a, b, steps=50):  
    if fun(a) * fun(b) >= 0:
        print('El método de la secante no se puede aplicar')
        return None  
    for n in range(steps + 1):
        # Cálculo de la secante
        n = a - fun(a)*(b - a)/(fun(b) - fun(a))     
        if fun(n) == 0:
            return n
        if fun(a) * fun(n) < 0:
            b = n
        else:
            a = n
    return n


#BISECCIÓN

def biseccion(f, a, b, tolerancia, iteracion = 1):
    if f(a)*f(b)>=0:
        print("este intervalo no tiene raíz para la funcion")
    x = (a+b)/2
    if -tolerancia < f(x) < tolerancia:
        return x, iteracion
    elif f(a)*f(x) >=0:
        return biseccion(f, x, b, tolerancia, iteracion+1)
    elif f(b)*f(x) >=0:
        return biseccion(f, a, x, tolerancia, iteracion+1)


#NEWTON-RAPSON

def newton_rapson(f, x, tolerancia, iteracion = 1):
    funcion = (f(x0+tolerancia/2)-f(x0-tolerancia/2))/tolerancia
    x = x0-f(x0/funcion)
    if -tolerancia < f(x) < tolerancia:
        return iteracion, x
    return newton_rapson(f, x, tolerancia, iteracion+1)    



#enunciado_1
f = lambda x: x**3 + x + 16
x, iteraciones = secante
print(x)
print(iteracion)

#enunciado_2
f = lambda x: x**3 + x + 16
x, iteraciones = biseccion
print(x)
print(iteracion)

#enunciado_3
f = lambda x: x**3 + x + 16
x, iteraciones = newton_rapson
print(x)
print(iteracion) 